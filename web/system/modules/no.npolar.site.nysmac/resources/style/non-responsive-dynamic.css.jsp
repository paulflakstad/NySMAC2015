<%-- 
    Document   : non-responsive.css
    Created on : Jul 6, 2015, 2:43:33 PM
    Author     : Paul-Inge Flakstad, Norwegian Polar Institute <flakstad at npolar.no>
--%><%@page import="java.io.BufferedReader,
                java.io.StringReader,
                java.util.*,
                java.util.regex.*,
                org.opencms.jsp.CmsJspActionElement,
		org.opencms.file.CmsObject"
                contentType="text/html" 
                pageEncoding="UTF-8"
%><%
/**
 * This script will generate a css file with no media queries, based on already 
 * existing, media-query-based css files. The resulting css can then be read by 
 * IE8 and older.
 * 
 * The idea is to serve all the normal css files to ANY browser, and then serve
 * an additional css file to IE8 and older. That additional file is generated by 
 * this script.
 * 
 * Pseudo-html example:
 *  head
 *      link rel="stylesheet" href="base.css"
 *      link rel="stylesheet" href="medium.css"
 *      link rel="stylesheet" href="large.css"
 *      [if lte IE8]
 *      link rel="stylesheet" href="non-responsive-dynamic.css"
 *      [endif]
 *  /head
 * 
 * IMPORTANT: For the script to work, it is vital that no empty media query 
 * sections exist, and that each media query section ends on the line after the
 * final rule, e.g. with two curly braces on two consecutive lines. (The latter 
 * being the end of a media query section.) Spaces are ignored. Example:
 *  @media (min-width:200px) {
*       .el {
*           foo:bar;
*       }
 *  }
 * 
 * Will produce an output like this:
 *  .el {
 *      foo:bar;
 *  }
 * 
 * Anything in a "@media (min-width:xxx)" section in the existing css files will
 * be printed by this script. Anything NOT in such a section will NOT be 
 * printed.
 * 
 * Also not printed: 
 *  - Sections with a max-width value less than IGNORED_MAX_WIDTHS_LIMIT
 *  - Import rules
 *  - Keyframes
 *  - etc. (basically, any non-media query line that starts with "@")
 */
CmsJspActionElement cms = new CmsJspActionElement(pageContext, request, response);
CmsObject cmso = cms.getCmsObject();

// The folder where the css files are located
final String CSS_FOLDER = "/system/modules/no.npolar.mosj/resources/style/";
// The order of the css files should be the same as in the HTML document
String[] cssFiles = new String[] { "navigation.css", "base.css", "smallscreens.css", "largescreens.css" };
// Any media query section with a max-width value less than this will be ignored
final int IGNORED_MAX_WIDHTS_LIMIT = 799;
// Minify?
final boolean MINIFY = true;


StringBuilder cssResult = new StringBuilder(512);
for (String cssFile : cssFiles) {
    try {
        String cssContent = cms.getContent(CSS_FOLDER.concat(cssFile));
        cssResult.append("/*=========== media-based rules from " + cssFile + " ===========*/" + (MINIFY ? "" : "\n"));
        BufferedReader reader = new BufferedReader(new StringReader(cssContent));
        String line = "";
        String prevLine = "";
        boolean skipLine = false;
        boolean processingValidMediaQuerySection = false;
        while ((line = reader.readLine()) != null) {
            skipLine = false;
            if (
                    (line.startsWith("@media") && line.contains("-width")) // = media query 
                    || (line.startsWith("@charset"))
                    || (line.startsWith("@import")) 
                    || (line.startsWith("@keyframes")) 
                    || (line.startsWith("@-")) 
                    || (line.trim().equals("}") && prevLine.trim().equals("}"))
                    ) {
                skipLine = true;
                if (line.startsWith("@media") && line.contains("-width")) {
                    processingValidMediaQuerySection = true;
                    // Do a max-width check to avoid adding smallscreen rules
                    if (line.contains("max-width:")) {
                        String mwStr = line.substring(line.indexOf("max-width:"));
                        Matcher m = Pattern.compile("[0-9]+").matcher(mwStr);
                        if (m.find()) {
                            if (Integer.valueOf(m.group()) <= IGNORED_MAX_WIDHTS_LIMIT) {
                                processingValidMediaQuerySection = false; // = skip everything in this media query section
                            }
                        }
                    }
                }
            }
            if (!line.trim().isEmpty())
                prevLine = line.trim(); // Keep previous line (necessary to identify two consecutive curly braces)

            if (processingValidMediaQuerySection && !skipLine) {
                cssResult.append(MINIFY ? line.trim() : (line + "\n"));
            }
        }
    } catch (Exception e) {
        cssResult.append("/* Error reading css file " + cssFile + ": " + e.getMessage() + " */");
    }
}

out.print(cssResult.toString());
%>